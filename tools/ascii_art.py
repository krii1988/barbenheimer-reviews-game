header = r"""
███████╗░█████╗░██████╗░██████╗░███████╗███╗░░██╗██╗░░██╗███████╗██╗███╗░░░███╗███████╗██████╗░
██╔══██╗██╔══██╗██╔══██╗██╔══██╗██╔════╝████╗░██║██║░░██║██╔════╝██║████╗░████║██╔════╝██╔══██╗
██████╦╝███████║██████╔╝██████╦╝█████╗░░██╔██╗██║███████║█████╗░░██║██╔████╔██║█████╗░░██████╔╝
██╔══██╗██╔══██║██╔══██╗██╔══██╗██╔══╝░░██║╚████║██╔══██║██╔══╝░░██║██║╚██╔╝██║██╔══╝░░██╔══██╗
██████╦╝██║░░██║██║░░██║██████╦╝███████╗██║░╚███║██║░░██║███████╗██║██║░╚═╝░██║███████╗██║░░██║
╚═════╝░╚═╝░░╚═╝╚═╝░░╚═╝╚═════╝░╚══════╝╚═╝░░╚══╝╚═╝░░╚═╝╚══════╝╚═╝╚═╝░░░░░╚═╝╚══════╝╚═╝░░╚═╝
"""

game_over = r"""

░██████╗░░█████╗░███╗░░░███╗███████╗  ░█████╗░██╗░░░██╗███████╗██████╗░
██╔════╝░██╔══██╗████╗░████║██╔════╝  ██╔══██╗██║░░░██║██╔════╝██╔══██╗
██║░░██╗░███████║██╔████╔██║█████╗░░  ██║░░██║╚██╗░██╔╝█████╗░░██████╔╝
██║░░╚██╗██╔══██║██║╚██╔╝██║██╔══╝░░  ██║░░██║░╚████╔╝░██╔══╝░░██╔══██╗
╚██████╔╝██║░░██║██║░╚═╝░██║███████╗  ╚█████╔╝░░╚██╔╝░░███████╗██║░░██║
░╚═════╝░╚═╝░░╚═╝╚═╝░░░░░╚═╝╚══════╝  ░╚════╝░░░░╚═╝░░░╚══════╝╚═╝░░╚═╝
"""

slash = r"""
░░░░██╗
░░░██╔╝
░░██╔╝░
░██╔╝░░
██╔╝░░░
╚═╝░░░░
    """


def get_ascii_number(number):
    ascii_numbers = {
        "0": r"""
░█████╗░
██╔══██╗
██║░░██║
██║░░██║
╚█████╔╝
░╚════╝░
        """,
        "1": r"""
░░███╗░░
░████║░░
██╔██║░░
╚═╝██║░░
███████╗
╚══════╝
        """,
        "2": r"""
██████╗░
╚════██╗
░░███╔═╝
██╔══╝░░
███████╗
╚══════╝
        """,
        "3": r"""
██████╗░
╚════██╗
░█████╔╝
░╚═══██╗
██████╔╝
╚═════╝░
        """,
        "4": r"""
░░██╗██╗
░██╔╝██║
██╔╝░██║
███████║
╚════██║
░░░░░╚═╝
        """,
        "5": r"""
███████╗
██╔════╝
██████╗░
╚════██╗
██████╔╝
╚═════╝░
        """,
        "6": r"""
░█████╗░
██╔═══╝░
██████╗░
██╔══██╗
╚█████╔╝
░╚════╝░
        """,
        "7": r"""
███████╗
╚════██║
░░░░██╔╝
░░░██╔╝░
░░██╔╝░░
░░╚═╝░░░
        """,
        "8": r"""
░█████╗░
██╔══██╗
╚█████╔╝
██╔══██╗
╚█████╔╝
░╚════╝░
        """,
        "9": r"""
░█████╗░
██╔══██╗
╚██████║
░╚═══██║
░█████╔╝
░╚════╝░
        """,
    }
    return ascii_numbers.get(number, "")

def print_ascii_number(number):
    ascii_number = [get_ascii_number(digit) for digit in str(number)]
    lines = ["  ".join(line) for line in zip(*ascii_number)]
    return "".join(lines)

def merge_ascii_numbers(number1, number2):
    lines_number1 = number1.strip().splitlines()
    lines_number2 = number2.strip().splitlines()

    max_lines = max(len(lines_number1), len(lines_number2))

    merged_ascii = []
    for i in range(max_lines):
        line_number1 = lines_number1[i] if i < len(lines_number1) else ""
        line_number2 = lines_number2[i] if i < len(lines_number2) else ""
        merged_line = f"{line_number1}  {line_number2}"
        merged_ascii.append(merged_line)

    return "\n".join(merged_ascii)